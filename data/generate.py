"""
Generate data by recording state-action-rewards from AquaCrop when using the baselines.
"""
from aquacrop import AquaCropModel, IrrigationManagement
import pandas as pd
import yaml

from evaluator import AquaCropEvaluator


class DataGenerator:
    """
    Generates data by running the AquaCrop model on a set of given baseline strategies.
    NOTE:
    We arrange the data so each row is the features that were passed into the model + the depth generated by that.
    So each row is: the weather at time step t and the outputs of the model generated by time step t-1.
    Therefore the first row is just weather data since we have no outputs from the model yet.
        TODO: This is an issue because the model doesn't know what to do at the first time step.
    """
    def __init__(self, aquacrop_params: dict, features: list[str]):
        self.evaluator = AquaCropEvaluator(aquacrop_params, features, n_jobs=1)

    def run_aquacrop(self, smt: list[float], max_irr: float) -> dict:
        """
        Runs the AquaCrop model specified by the evaluator using the irrigation_method=1 strategy parameterized by
        the smt and max_irr values.
        Returns the results dictionary from the AquaCrop model (see AquaCropEvaluator.run_aquacrop).
        """
        irrigation_management = IrrigationManagement(irrigation_method=1, SMT=smt, MaxIrrSeason=max_irr)
        model = AquaCropModel(sim_start_time=self.evaluator.sim_start_date,
                              sim_end_time=self.evaluator.sim_end_date,
                              weather_df=self.evaluator.weather_data,
                              soil=self.evaluator.soil,
                              crop=self.evaluator.crop,
                              initial_water_content=self.evaluator.init_wc,
                              irrigation_management=irrigation_management)

        results = self.evaluator.run_aquacrop(model, None)
        return results

    def generate_data(self, baseline_path: str):
        """
        Takes each baseline in a csv file and runs the aquacrop model with it.
        Merges the baseline with the weather data.
        Then aggregates all the results into a single dataframe with a column to indicate which baseline it came from.
        """
        # Set up weather data to be appended to each
        weather_df = self.evaluator.weather_data
        date_col = weather_df["Date"]
        start_date = pd.to_datetime(self.evaluator.sim_start_date)
        end_date = pd.to_datetime(self.evaluator.sim_end_date)
        weather_df = weather_df[(date_col >= start_date) & (date_col <= end_date + pd.Timedelta(days=1))]

        baseline_df = pd.read_csv(baseline_path)
        results_dfs = []
        for i, row in baseline_df.iterrows():
            print(f"Generating data for baseline {i}: SMT[{row['SMT-1']:.2f}, {row['SMT-2']:.2f}, {row['SMT-3']:.2f}, {row['SMT-4']:.2f}], Max Irrigation: {row['max_irrigation']:.0f}")  #noqa

            # Run model with baseline params
            smt = [row[f"SMT-{i}"] for i in range(1, 5)]
            max_irr = row["max_irrigation"]
            results_df = self.run_aquacrop(smt, max_irr)

            # Merge with weather data noting how to align the time steps
            results_df["Date"] = pd.date_range(start=start_date+pd.Timedelta(days=1), end=end_date+pd.Timedelta(days=1))
            results_df = pd.merge(left=weather_df, right=results_df, on="Date", how="left")

            # Roll the irrigation column back 1 day to align with the weather data
            results_df["depth"] = results_df["IrrDay"].shift(-1)

            # Tag with baseline number
            results_df["baseline"] = i
            results_dfs.append(results_df)
            print(f"\tYield: {results_df['DryYield'].max():.2f}, Irrigation: {results_df['IrrDay'].sum():.2f}")

        all_results_df = pd.concat(results_dfs)
        return all_results_df


def main():
    """
    Main logic to generate the data using the DataGenerator
    """
    with open("config.yml", "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    generator = DataGenerator(config["eval_params"]["aquacrop_params"], config["eval_params"]["features"])
    all_results_df = generator.generate_data("baselines/one-season.csv")
    all_results_df.to_csv("data/less-features.csv", index=False)


if __name__ == "__main__":
    main()
